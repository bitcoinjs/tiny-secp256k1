name: CI

on:
  push:
    branches:
      - master
  pull_request:

env:
  NODE_VERSION: 18.16.1

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
    - name: Fetch code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install Rust toolchain with wasm32-unknown-unknown, clippy and rustfmt
      run: |
        rustup toolchain install $(cat ./rust-toolchain) \
          --target wasm32-unknown-unknown \
          --component clippy \
          --component rustfmt

    - name: Install Node.js@${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Node.js dependencies
      run: npm ci

    - name: Run lint
      run: |
        make lint

  test:
    name: Test in Node.js / browser (electron)
    runs-on: ubuntu-latest
    steps:
    - name: Fetch code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install Rust toolchain with wasm32-unknown-unknown
      run: rustup toolchain install $(cat ./rust-toolchain) --target wasm32-unknown-unknown

    - name: Install Node.js@${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Node.js dependencies
      run: npm ci

    - uses: actions/cache@v2
      id: binaryen-cache
      with:
        path: binaryen-version_100
        key: binaryen-version_100

    - name: Install wasm-opt (binaryen)
      if: steps.binaryen-cache.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/WebAssembly/binaryen/releases/download/version_100/binaryen-version_100-x86_64-linux.tar.gz
        tar zxvf binaryen-version_100-x86_64-linux.tar.gz binaryen-version_100/bin/wasm-opt

    - name: Build wasm
      run: |
        export PATH=$PATH:./binaryen-version_100/bin/
        make build-wasm
        shasum -a 256 lib/secp256k1.wasm
        rustc --version --verbose

    - name: Build JS
      run: make build-js

    - name: Run Node.js tests and coverage
      run: |
        make test-node-raw-ci
        make test-node-coverage-raw

    - name: Run browser (electron) tests
      env:
        DISPLAY: :99.0
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        make test-browser-build-raw
        make test-browser-raw-ci

    - name: Upload wasm
      uses: actions/upload-artifact@v2
      with:
        name: wasm
        path: lib/secp256k1.wasm

  package:
    name: Create package
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - name: Fetch code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install Node.js@${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build JS
      run: make build-js

    - name: Download compiled wasm
      uses: actions/download-artifact@v2
      with:
        name: wasm
        path: lib

    - name: Create package
      run: npm pack && shasum -a 256 tiny-secp256k1-*.tgz

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: package
        path: tiny-secp256k1-*.tgz

  benchmark:
    name: Benchmark
    needs: [test]
    continue-on-error: true
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - name: Fetch code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install Node.js@${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build JS
      run: make build-js

    - name: Download compiled wasm
      uses: actions/download-artifact@v2
      with:
        name: wasm
        path: lib

    - name: Install benchmark dependencies
      run: cd benches && npm ci

    - name: Run benchmark
      run: cd benches && npm start
